@page "/producto/eliminar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Eliminar Producto</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="producto" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nombre" @bind-Value="producto.Nombre" For="@(() => producto.Nombre)" />
                        <MudTextField Label="Precio" @bind-Value="producto.Precio" For="@(() => producto.Precio)" />
                        <MudSelect Variant="Variant.Outlined" Label="Producto" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="producto.IdCategoria" For="@(() => producto.IdCategoria)">
                            @foreach (var item in categorias)
                            {
                    <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>}
                        </MudSelect>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto">Eliminar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
<MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurrió un problema.</MudAlert>}
        </MudPaper>
    </MudItem>
</MudGrid>

@code { [Parameter]
            public int id { get; set; }

            private IEnumerable<Categoria> categorias = new List<Categoria>();
            private bool showLeaveAlert = false;
            Producto producto = new Producto();

            protected override async Task OnInitializedAsync()
            {
                Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
                await getDepartamentos();

                var resp = await Http.GetStringAsync("producto/" + id);
                producto = JsonSerializer.Deserialize<Producto>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }

            private async Task OnValidSubmit(EditContext context)
            {
                await eliminar();
            }

            private async Task eliminar()
            {
                var httpResponse = await Http.DeleteAsync("producto/" + producto.Id);

                if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
                {
                    showLeaveAlert = true;
                }
                else
                {
                    NavigationManager.NavigateTo("producto/index");
                }
            }

            private void CloseMe(bool value)
            {
                showLeaveAlert = false;
            }

            private async Task getDepartamentos()
            {
                var httpResponse = await Http.GetStringAsync("categoria");
                categorias = JsonSerializer.Deserialize<IEnumerable<Categoria>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            } }
